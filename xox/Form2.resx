<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+6ABAPugARf7oAHX+6AB//ugAY77oAEA+6ABAAAA
        AAAAAAAAAAAAAAAAAAD7oAEA+6ABAPugAY77oAH/+6AB1/ugARf7oAEA+qACBfqgAgL6oAIA+qEBAvqh
        AQX6oQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4ogIA+KICF/iiAtf4ogL/+KICjvii
        AgD4ogIAAAAAAAAAAAAAAAAAAAAAAPiiAgD4ogIA+KICjviiAv/4ogLX+KICFvekAw74owKH96MCWfSm
        BQL4owJY+KMCh/ejAw/3owMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPWlAwD1pQMX9aUD1/Wl
        A//1pQOO9aUDAPWlAwAAAAAAAAAAAAAAAAAAAAAA9aUDAPWlAwD1pQOO9aUD//WlA9f1pQMZ9aUDhvWl
        A/71pQPn9KUDk/WlA+b1pQP+9aUDh/KoBQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8qcFAPKn
        BRfypwXX8qcF//KnBY7ypwUA8qcFAAAAAAAAAAAAAAAAAAAAAADypwUA8qcFAPKnBY7ypwX/8qcF1/Kn
        BRfzpwRX8qcF6PKnBf/ypwX/8qcF//KnBejzpwRY/5EEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADvqgYA76oGF++qBtfvqgb/76oGju+qBgDvqgYAAAAAAAAAAAAAAAAAAAAAAO+qBgDvqgYA76oGju+q
        Bv/vqgbX76oGFu+rBgLvqgaT76oG/++qBv/vqgb/76oGk++qBgTvqgYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOytBwDsrQcX7K0H1+ytB//srQeO7K0HAOytBwAAAAAAAAAAAAAAAAAAAAAA7K0HAOyt
        BwDsrQeO7K0H/+ytB9fsrQcX664IV+ytB+jsrQf/7K0H/+ytB//srQfo664IWNTEGQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA6bAJAOmwCRfpsAnX6bAJ/+mwCY7psAkA6bAJAAAAAAAAAAAAAAAAAAAA
        AADpsAkA6bAJAOmwCY7psAn/6bAJ1+mwCRnprwiG6LAJ/uiwCefprwiT6LAJ5uiwCf7prwiH6q4IAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADlsgoA5bIKF+WyCtflsgr/5bIKjuWyCgDlsgoAAAAAAAAA
        AAAAAAAAAAAAAOWyCgDlsgoA5bIKjuWyCv/lsgrX5bIKFuexCQ3msgqG5rEKWO6qBQHmsglY5rIKh+ex
        CQ/nsQkA4LcMF+C3DBfgtwwX4LcMF+C3DBfgtwwX4LcMF+C3DBbhtgss4rUL2+K1C//itQuY4LcMFeC3
        DBfgtwwX4LcMF+C3DBfgtwwX4LcMF+C3DBXitQuY4rUL/+K1C9vhtgss4LcMFeC3DBngtwwX4LcMFuC3
        DBfgtwwZ4LcMFuC3DBffuA3X37gN19+4DdffuA3X37gN19+4DdffuA3X37gN19+4DdvfuAz537gM/9+4
        DO3fuA3X37gN19+4DdffuA3X37gN19+4DdffuA3X37gN19+4DO3fuAz/37gM+d+4DdvfuA3X37gN19+4
        DdffuA3X37gN19+4DdffuA3X37gN19y7Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7
        Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7
        Dv/cuw7/3LsO/9y7Dv/cuw7/3LsO/9y7Dv/cuw7/2r0Pjtq9D47avA+M2rwPidq8D4navA+K2r0Pjdq9
        D43avQ+Y2b0P7dm9D//ZvQ/N2r0Pjdq9D43avA+L2r0Pjtq9D47avA+L2r0Pjdq9D43ZvQ/N2b0P/9m9
        D+3avQ+Y2r0Pjdq8D43avA+K2rwPidq8D4ravA+N2r0Pjtq9D47QxBMA1cERANPCERTUwRFS1MERatTB
        EUPTwhEK1cEQANXAEBfVwBDX1cAQ/9XAEI7VwBAA08IRENTBETLTwxEC0sMSAtTBETLUwhEQ1cAQANXA
        EI7VwBD/1cAQ19XAEBfVwBAA08IRDtTBEUvUwRFr1MERS9PCEQ/UwhEAzMYWANHDEgDRxBIq0sMSv9LD
        EvzSwxL/0sMS9tLDEp3RxBIR0sMSFtLDEtfSwxL/0sMSjdDFEg3SwxKX0sMS5tLDElnRxBJZ0sMS5dLD
        EpfQxRIN0sMSjdLDEv/SwxLX0sMSFdHEEhvSwxKv0sMS+dLDEv/SwxL50sMSr9HEEh3RxBIAzscUB8/G
        E6TPxRP/z8UT+8/FE/HPxRP+z8UT/c/GE3DPxRMUz8UT18/FE//PxROL0MUTMc/FE+PPxRP/z8UT7s/F
        E+7PxRP/z8UT5NDFEzLPxROLz8UT/8/FE9fPxRMXz8YTi8/FE//PxRP9z8UT8M/FE/3PxRP/z8YTi8nQ
        FgHMyBQkzMgU3szIFP/MyBSkzscUOczIFM7MyBT/zMgUtMzIFB3MyBTXzMgU/8zIFI3IzBUAzccUWczI
        FPDMyBT/zMgU/8zIFPDNxxRZyMsVAMzIFI3MyBT/zMgU1szIFCjMyBTLzMgU/8zIFLrOxhQ2zMgUuszI
        FP/MyBTLzMgUE8nLFSTJyxbeycsW/8nLFqTHzBY4ycsWzsnLFv/Jyxa0ycsWHcnLFtfJyxb/ycsWjczI
        FQDIzBZZycsW8MnLFv/Jyxb/ycsW8MjMFlnOyBUAycsWjcnLFv/JyxbWycsWKMnLFsvJyxb/ycsWusfN
        FjXJyxa6ycsW/8nLFsvJyxYTx8wWB8bNF6TGzhf/xs4X+8bOF/HGzhf+xs4X/cbNF3HGzhcUxs4X18bO
        F//GzheLxc4XMcbOF+PGzhf/xs4X7sbOF+7Gzhf/xs4X5MXOFzLGzheLxs4X/8bOF9fGzhcXxs0Xi8bO
        F//Gzhf9xs4X8MbOF/3Gzhf/xs0Xi87FEwHD0BgAxM8YKsPQGL/D0Bj8w9AY/8PQGPbD0BidxM8YEcPQ
        GBbD0BjXw9AY/8PQGI3FzhgNw9AYl8PQGObD0BhZxNAYWcPQGObD0BiXxc4YDcPQGI3D0Bj/w9AY18PQ
        GBXEzxgbw9AYr8PQGPnD0Bj/w9AY+cPQGK/EzxgdxM8YAMXOFwDB0hkAwtEZFMHSGVLB0hlqwdIZQ8LR
        GQrA0hoAwNMaF8DTGtfA0xr/wNMajsDTGgDB0RkQwdIZMsLRGQLD0BkCwdIZMsLRGRDA0xoAwNMajsDT
        Gv/A0xrXwNMaF8DSGgDC0RkOwdIZS8HSGWvB0hlLwtEZD8HRGQDHzBUAu9YbjrvWG4671xuMu9cbibvX
        G4m71xuKu9YbjbvWG4271huYvNYb7bzWG/+81hvNu9YbjbvWG4271xuLu9YbjrvWG4671xuLu9YbjbvW
        G4281hvNvNYb/7zWG+271huYu9YbjbvXG4271xuKu9cbibvXG4q71xuNu9YbjrvWG4652Bz/udgc/7nY
        HP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7nY
        HP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7nYHP+52Bz/udgc/7bb
        Hde22x3Xttsd17bbHde22x3Xttsd17bbHde22x3Xttsd27bbHvm22x7/ttse7bbbHde22x3Xttsd17bb
        Hde22x3Xttsd17bbHde22x3Xttse7bbbHv+22x75ttsd27bbHde22x3Xttsd17bbHde22x3Xttsd17bb
        Hde22x3XtdweF7XcHha03B4btdweGbXcHha13B4XtN0fHbXcHhS03R8ss94f27PeH/+z3h+YtdweFbXc
        Hhe13B4XtdweF7XcHhe13B4XtdweF7XcHhWz3h+Ys94f/7PeH9u03R8stdweFrXcHhe13B4XtdweF7Xc
        Hhe13B4XtdweF7XcHheu4iEAruMhCq/hIISv4SB1rOQiBa/iIU+v4SCdruIhHLDhIBWw4SDXsOEg/7Dh
        II6w4SAAsOEgAAAAAAAAAAAAAAAAAAAAAACw4SAAsOEgALDhII6w4SD/sOEg17DhIBew4SAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKziIgCs5CJzreMh/K3jIfOs5CKirOMi4a3jIf+s5CKkreMhIK3j
        Idet4yH/reMhjq3jIQCt4yEAAAAAAAAAAAAAAAAAAAAAAK3jIQCt4yEAreMhjq3jIf+t4yHXreMhF63j
        IQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqeYjAKvlIj2q5iPWqeYj/6nmI/+p5iP/qeYj7Krl
        ImKp5iMZqeYj16nmI/+p5iOOqeYjAKnmIwAAAAAAAAAAAAAAAAAAAAAAqeYjAKnmIwCp5iOOqeYj/6nm
        I9ep5iMXqeYjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACl6iQAruIjAKbpJHqm6ST/pukk/6bp
        JP+m6SSspukkCabpJBam6STXpukk/6bpJI6m6SQApukkAAAAAAAAAAAAAAAAAAAAAACm6SQApukkAKbp
        JI6m6ST/pukk16bpJBem6SQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKTrJgCi7CZNo+wl5KPs
        Jf+j7CX+o+wl/6PsJfWi7CZ3o+wlG6PsJdej7CX/o+wljqPsJQCj7CUAAAAAAAAAAAAAAAAAAAAAAKPs
        JQCj7CUAo+wljqPsJf+j7CXXo+wlF6PsJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnvApAKHu
        J2ig7if3oO4n7KHtJoig7ifUoO4n/6DuJ5ig7iceoO4n16DuJ/+g7ieOoO4nAKDuJwAAAAAAAAAAAAAA
        AAAAAAAAoO4nAKDuJwCg7ieOoO4n/6DuJ9eg7icXoO4nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACe7ycAnu8nBp3wKG2d8ChgoOwkAZ7wKD6d8CiFnvAnE53xKBad8SjXnfEo/53xKI6d8SgAnfEoAAAA
        AAAAAAAAAAAAAAAAAACd8SgAnfEoAJ3xKI6d8Sj/nfEo153xKBed8SgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACb8igAmvIoApryKAKb8igAm/IpAZvyKAOa8ykAmvMpF5rzKdea8yn/mvMpjprz
        KQCa8ykAAAAAAAAAAAAAAAAAAAAAAJrzKQCa8ykAmvMpjprzKf+a8ynXmvMpF5rzKQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/w/wk/8P8AH/D/AA/w/wAf8P8AH/D/AB/w/wAP8P8AEAAAAAAAAAAAAA
        AAAAAAAAwQgQg4AAAAEAAAAAAAgQAAAIEAAAAAAAgAAAAcEIEIMAAAAAAAAAAAAAAAAAAAAAgA/w/4AP
        8P+AD/D/wA/w/4AP8P+AD/D/gA/w/8kP8P8=
</value>
  </data>
</root>